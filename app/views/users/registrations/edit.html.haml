#wrapper
  %section#contacts
    .row
      .medium-6.columns.medium-centered.animated{"data-animate" => "fadeInDown", "data-animate-delay" => "0"}
        .title-section
          %h3 Update Account
    .row
      #message
      = form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| 
        .medium-6.columns.medium-centered
          = f.text_field :first_name, placeholder: "First Name"
        .medium-6.columns.medium-centered
          = f.text_field :last_name, placeholder: "Last Name"
        
        .medium-6.columns.medium-centered
          - if devise_mapping.confirmable? && resource.pending_reconfirmation?
            %label.error
              Currently waiting confirmation for: #{ resource.unconfirmed_email}
          = f.email_field :email, placeholder: "Email"
        .medium-6.columns.medium-centered
          = f.password_field :password, autocomplete: "off", placeholder: "Password (leave blank if you don't want to change it)"
        .medium-6.columns.medium-centered
          = f.password_field :password_confirmation, autocomplete: "off", placeholder: "Password Confirmation (leave blank if you don't want to change it)"
        .medium-12.columns.text-center
          %button#submit{:type => "submit"} UPDATE

- content_for :javascript do
  :javascript
    var initialEmail = "#{resource.email}";
    var getPassword = function(){return $("input[name='user[password]']").val()};
    var getPasswordConfirmation = function(){return $("input[name='user[password_confirmation]']").val()};
    $('form.edit_user').validate({
      rules: {
        'user[first_name]': {
          required: true
        },
        'user[last_name]': {
          required: true
        },
        'user[email]': {
          required: true,
          email: true,
          remote: {
            param: '/users/check_email_taken',
            depends: function(){
              return ($("input[name='user[email]']").val().trim() !== initialEmail);
            }
          }
        },
        'user[password]': {
          required: {
            depends: function(){
              return (getPasswordConfirmation() !== '' || getPassword() !== '');
            }
          },
          minlength: {
            param: 8,
            depends: function(){
              return getPassword() !== '';
            }
          }
        },
        'user[password_confirmation]': {
          required: {
            depends: function(){
              return (getPasswordConfirmation() !== '' || getPassword() !== '');
            }
          },
          equalTo: {
            param: '#user_password',
            depends: function(){
              return getPassword() !== '';
            }
          }
        }
      },
      messages: {
        'user[first_name]': {
          required: 'Please enter your first name.'
        },
        'user[last_name]': {
          required: 'Please enter your last name.'
        },
        'user[email]': {
          required: 'Please enter your email.',
          email: 'Please enter a valid email.',
          remote: 'This email is already registered with us.'
        },
        'user[password]': {
          required: "A password is required. Leave 'password confirmation' field blank if you dont intend to change your password.",
          minlength: 'Your password should be at least 8 characters.'
        },
        'user[password_confirmation]': {
          required: "A password confirmation is required. Leave 'password' field blank if you dont intend to change your password.",
          equalTo: "Your passwords don't match."
        }
      }
    })