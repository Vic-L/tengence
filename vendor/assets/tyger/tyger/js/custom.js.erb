/*
* Theme Name: Tyger
* File name: custom.js
* Theme URL: tyger.mordorthemes.com
* Description: Tyger - Beautiful onepage template
* Author: Mordorthemes
* Author URL: http://www.mordorthemes.com
* Support: support@mordorthemes.com
* Version: 1.0
*/



/* ==============================================
	Start window load function strict mode
=============================================== */
$(window).on("load", function () {
	
	'use strict';
	
	/* page preloader */
	$("#loader").delay(500).fadeOut(); 
	$(".mask").delay(1000).fadeOut("slow");

	/* parallax */
	$(window).stellar({
		responsive: true,
		horizontalScrolling:false,
		parallaxBackgrounds: true
	});

	var urlHash = window.location.href.split("#")[1];
	if (urlHash &&  $('#' + urlHash).length )
		$('html,body').animate({
			scrollTop: $('#' + urlHash).offset().top
		}, 900);
});





/* ==============================================
	Start ready function strict mode
=============================================== */
jQuery(document).ready(function($){

	use:"strict";

	// Sticky header
	$(function(){
		var shrinkHeader = 300;
		$(window).scroll(function() {
			var scroll = getCurrentScroll();
			if ( scroll >= shrinkHeader ) {
				$('header').addClass('shrink');
			}
			else {
				$('header').removeClass('shrink');
			}
		});
		function getCurrentScroll() {
			return window.pageYOffset || document.documentElement.scrollTop;
		}
	});



	// Tabs animation
	function tabsAnimation(tabs){
		var $this = $(tabs);
		var $link = $this.find('li > a');

		$this.find('.tabs-content').css('height', $this.find('.content.active').height());

		$link.on('click', function(){
			$this.find('.tabs-content').css('height',  $this.find( $(this).attr('href') ).height());
		});
	};
	tabsAnimation($('.tabs-container'));



	// Accordion	
	(function($) {
		$.fn.accordionAnimated = function() {

			var
			$accordion = this,
				$items = $accordion.find('> li'),
				$targets = $items.find('.content'),
				options = {
					active_class : 'active',  // class for items when active
					multi_expand: false,    // whether mutliple items can expand
					speed : 500,        // speed of animation
					toggleable: true      // setting to false only closes accordion panels when another is opened
				}
			;

			$.extend(options, Foundation.utils.data_options($accordion));

			$items.each(function(i) {
				$(this).find('a:eq(0)').on('click.accordion', function() {
					if(!options.toggleable && $items.eq(0).hasClass(options.active_class)) {
						return;
					}

					$targets.eq(i)
						.stop(true, true)
						.slideToggle(options.speed);

					if(!options.multi_expand) {
						$targets.not(':eq('+i+')')
							.stop(true, true)
							.slideUp(options.speed);
					}
				});
			});
		};
	}(jQuery)); 

	$('.accordion').accordionAnimated(); 



	// Animation on appear.js
	$('.animated').appear(function() {
		var elem = $(this);
		var animate = elem.data('animate');
		if ( !elem.hasClass('visible') ) {
			var animateDelay = elem.data('animate-delay');
			if ( animateDelay ) {
				setTimeout(function(){
					elem.addClass( animate + " visible" );
				}, animateDelay);
			} else {
				elem.addClass( animate + " visible" );
			}
		}
	});


	// Navigation
	$.daisyNav();
	
	$('.menu-list a').click(function(){	
		$('ul#navigation').removeClass( 'show-for-devices' );
		$('.menu-toggle-button').removeClass( 'active' )
	});	


	// // Navigation
	// (function() {
	// 	var triggerBttn = document.getElementById( 'trigger-overlay' ),
	// 		overlay = document.querySelector( 'div.overlay-menu' ),
	// 		closeBttn = overlay.querySelector( 'a.overlay-close');
	// 	transEndEventNames = {
	// 		'WebkitTransition': 'webkitTransitionEnd',
	// 		'MozTransition': 'transitionend',
	// 		'OTransition': 'oTransitionEnd',
	// 		'msTransition': 'MSTransitionEnd',
	// 		'transition': 'transitionend'
	// 	},
	// 		transEndEventName = transEndEventNames[ Modernizr.prefixed( 'transition' ) ],
	// 		support = { transitions : Modernizr.csstransitions };

	// 	function toggleOverlay() {
	// 		if( classie.has( overlay, 'open' ) ) {
	// 			classie.remove( overlay, 'open' );
	// 			classie.add( overlay, 'close' );
	// 			var onEndTransitionFn = function( ev ) {
	// 				if( support.transitions ) {
	// 					if( ev.propertyName !== 'visibility' ) return;
	// 					this.removeEventListener( transEndEventName, onEndTransitionFn );
	// 				}
	// 				classie.remove( overlay, 'close' );
	// 			};
	// 			if( support.transitions ) {
	// 				overlay.addEventListener( transEndEventName, onEndTransitionFn );
	// 			}
	// 			else {
	// 				onEndTransitionFn();
	// 			}
	// 		}
	// 		else if( !classie.has( overlay, 'close' ) ) {
	// 			classie.add( overlay, 'open' );
	// 		}
	// 	}



	// 	triggerBttn.addEventListener( 'click', toggleOverlay );
	// 	closeBttn.addEventListener( 'click', toggleOverlay );


	// })();


	$('a.inner-link').click(function(){ 
		$('div.overlay-menu').removeClass('open');
	});

});
/* end ready function */




/* ==============================================
	Main Slider Full Height
=============================================== */
var windowHeight = $(window).height();
var mainContentHeight = $('.main-content').height();
var difference = windowHeight - mainContentHeight;
$('#slider .bg1').height( windowHeight );
$('.main-content').css('top',difference/2 + 'px');

$(window).resize(function() {
	var windowHeight = $(window).height();
	var mainContentHeight = $('.main-content').height();
	var difference = windowHeight - mainContentHeight;
	$('#slider .bg1').height( windowHeight );
	$('.main-content').css('top',difference/2 + 'px');
});




/* ==============================================
  Counter
=============================================== */  
$(window).load(function() {
	$(".counter").appear(function(){
		$(this).each(function(){
			dataperc = $(this).attr("data-perc"),
				$(this).find(".number").delay(3000).countTo({
				from: 0,
				to: dataperc,
				speed: 2000,
				refreshInterval: 50,

			});  
		});
	});
});
(function($) {
	$.fn.countTo = function(options) {
		// merge the default plugin settings with the custom options
		options = $.extend({}, $.fn.countTo.defaults, options || {});

		// how many times to update the value, and how much to increment the value on each update
		var loops = Math.ceil(options.speed / options.refreshInterval),
			increment = (options.to - options.from) / loops;

		return $(this).each(function() {
			var _this = this,
				loopCount = 0,
				value = options.from,
				interval = setInterval(updateTimer, options.refreshInterval);

			function updateTimer() {
				value += increment;
				loopCount++;
				$(_this).html(value.toFixed(options.decimals));

				if (typeof(options.onUpdate) == 'function') {
					options.onUpdate.call(_this, value);
				}

				if (loopCount >= loops) {
					clearInterval(interval);
					value = options.to;

					if (typeof(options.onComplete) == 'function') {
						options.onComplete.call(_this, value);
					}
				}
			}
		});
	};

	$.fn.countTo.defaults = {
		from: 0,  // the number the element should start at
		to: 100,  // the number the element should end at
		speed: 1000,  // how long it should take to count between the target numbers
		refreshInterval: 100,  // how often the element should be updated
		decimals: 0,  // the number of decimal places to show
		onUpdate: null,  // callback method for every time the element is updated,
		onComplete: null,  // callback method for when the element finishes updating
	};
})(jQuery);




